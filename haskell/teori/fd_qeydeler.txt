Haskell'de `_`, `|` ve `||` sembollerinin her biri farklı anlamlar taşır ve farklı bağlamlarda kullanılır. İşte bu sembollerin detaylı açıklamaları:

### 1. `_` (Underscore)

**Wildcard Pattern**: `_` sembolü genellikle desen eşleştirme (pattern matching) sırasında kullanılır ve herhangi bir değeri temsil eder, ancak bu değeri kullanmak istemediğinizi belirtir. Bu, değişken adlarını yazmak zorunda kalmadan belirli desenlerin eşleşmesine izin verir.

#### Örnek:

```haskell
-- Desen eşleştirme örneği
describeList :: [a] -> String
describeList [] = "The list is empty."
describeList [_] = "The list has one element."
describeList [_, _] = "The list has two elements."
describeList _ = "The list has more than two elements."
```

Bu işlev, listenin uzunluğuna göre farklı bir string döndürür. `_` kullanımı sayesinde ilgilenmediğimiz değerlere dikkat etmeden sadece yapıya göre eşleştirme yapabiliyoruz.

### 2. `|` (Pipe)

**Guard**: `|` sembolü Haskell'de bir fonksiyon tanımlarken muhafız (guard) olarak kullanılır. Bir muhafız, bir fonksiyonun farklı koşullar altında nasıl davrandığını belirlemek için kullanılır ve bir if-else ifadesine benzer.
#### Örnek:

```haskell
-- Guard kullanımı örneği
absValue :: Int -> Int
absValue x
    | x < 0     = -x
    | otherwise = x
```

Bu örnekte, `absValue` işlevi, negatif sayıları pozitif yapmak için muhafızları kullanır.
ayrica `|` sembolü, liste üretme ifadesinin bir parçasıdır ve "guard" olarak adlandırılır. Haskell'de bir liste üretme ifadesinde kullanıldığında, bir filtreleme mekanizması sağlar.

Örneğin, `factors` fonksiyonunda, `[x | x <- [1..n], n `mod` x == 0]` ifadesinde `|` sembolü, bir liste üretme ifadesinin başlangıcını belirtir. `x <- [1..n]` ifadesi, 1'den `n`'e kadar olan sayıları içeren bir liste oluşturur ve bu listenin her elemanını `x` olarak alır. `n `mod` x == 0` ifadesi ise her `x` için `n`'nin `x`'e bölünüp bölünmediğini kontrol eder. Eğer bölünüyorsa, bu `x` değerini listeye ekler.

Kısacası, `|` sembolü, bir liste üretme ifadesinin başlangıcını belirtir ve ardından filtreleme kriterlerini içerir. Bu filtreleme kriterleri sağlanan her öğe, sonuç listesine eklenir.

### 3. `||` (Logical OR)

**Logical OR**: `||` sembolü Haskell'de mantıksal "veya" operatörü olarak kullanılır. İki Boolean değerini karşılaştırır ve en az biri `True` ise `True` döner, aksi takdirde `False` döner.

#### Örnek:

```haskell
-- Mantıksal OR örneği
isWeekend :: String -> Bool
isWeekend day = day == "Saturday" || day == "Sunday"

main :: IO ()
main = do
    print (isWeekend "Saturday")  -- True
    print (isWeekend "Monday")    -- False
```

Bu örnekte, `isWeekend` işlevi bir günün hafta sonu olup olmadığını kontrol eder ve `||` operatörünü kullanarak `True` veya `False` döner.

### Özet

- **`_` (Underscore)**: Desen eşleştirmede kullanılmayan herhangi bir değeri temsil eder.
- **`|` (Pipe)**: Fonksiyon tanımlarında muhafız (guard) olarak kullanılır.
- **`||` (Logical OR)**: İki Boolean değeri arasında mantıksal "veya" işlemi yapar.

Haskell'de `:` operatörü (genellikle "cons" operatörü olarak adlandırılır), bir liste oluştururken bir elemanı listenin başına eklemek için kullanılır. Bu operatör, tek bir elemanı (listenin başı) ve bir listeyi (listenin geri kalanı) birleştirir.

### Kullanımı
- **Liste Oluşturma:** `x : xs` şeklinde kullanıldığında, `x` listenin başındaki elemandır ve `xs` listenin geri kalanını temsil eder.

Örnekler:
```haskell
-- Tek bir elemanlı bir liste oluşturma
1 : []
-- Sonuç: [1]

-- Bir elemanı mevcut bir listenin başına ekleme
1 : [2, 3, 4]
-- Sonuç: [1, 2, 3, 4]

-- Birden fazla elemanı listeye ekleme
1 : 2 : 3 : []
-- Sonuç: [1, 2, 3]
```

### Özyineleme ve Desen Eşleme
`:` operatörü, özyinelemeli fonksiyonlarda ve desen eşlemede yaygın olarak kullanılır. Örneğin:

**Desen Eşleme ile Tanım:**
```haskell
-- Bir listenin başını ve geri kalanını ayrıştırma
head' :: [a] -> a
head' (x:_) = x
head' [] = error "Empty list"

-- Bir listenin uzunluğunu hesaplama
length' :: [a] -> Int
length' [] = 0
length' (_:xs) = 1 + length' xs
```

### Açıklama
- `head'` fonksiyonu, bir listenin ilk elemanını döndürür. `(x:_)` deseni, `x` listenin ilk elemanını alır ve `_` ise geri kalan listeyi yok sayar.
- `length'` fonksiyonu, bir listenin uzunluğunu hesaplar. Boş liste (`[]`) durumunda `0` döndürür. Eğer liste boş değilse, `_` ilk elemanı temsil eder ve `xs` geri kalan listeyi temsil eder. Bu şekilde özyinelemeli olarak listenin uzunluğu hesaplanır.

### Özet
- `:` operatörü, bir elemanı bir listenin başına eklemek için kullanılır.
- Desen eşleme ve özyinelemeli fonksiyonlar yazarken sıkça kullanılır.
- `x : xs` deseni, `x` listenin ilk elemanını ve `xs` geri kalan listeyi temsil eder.

Bu operatör, Haskell'de liste işlemlerinin temel taşlarından biridir ve listelerle çalışırken oldukça kullanışlıdır.

Bu semboller Haskell'in farklı alanlarında kullanılır ve kodun okunabilirliğini ve ifadelerin doğruluğunu artırır.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Haskell'de liste veri yapısı özel bir türdür ve doğrudan dilin temeline entegre edilmiştir. Liste veri yapısının iki temel yapıcı (constructor) fonksiyonu vardır:

1. **Empty List (`[]`)**: Boş listeyi temsil eder.
2. **Cons (`(:)`)**: Bir elemanı bir listeye ekler. Bu yapıcı, yeni bir liste oluşturmak için bir elemanı ve mevcut bir listeyi alır.

Bu yapıcıları kullanarak liste oluşturma ve kullanım örneklerini inceleyelim.

### Liste Yapıcıları ile Liste Tanımlama

1. **Boş Liste**: Boş liste `[]` ile gösterilir.
2. **Cons**: `x : xs` şeklinde bir yapıdır, burada `x` listenin başındaki eleman, `xs` ise listenin geri kalanıdır.

### Örnekler

#### Boş Liste

```haskell
emptyList :: [a]
emptyList = []
```

Bu, türü `[a]` olan bir boş listedir.

#### Cons ile Liste Oluşturma

```haskell
singleElementList :: [Int]
singleElementList = 1 : []

multipleElementList :: [Int]
multipleElementList = 1 : 2 : 3 : []
```

- `singleElementList` bir elemanlı bir liste (`[1]`).
- `multipleElementList` üç elemanlı bir liste (`[1, 2, 3]`).

### Liste Destructuring (Yapı Sökme)

Haskell'de listeleri desen eşleştirme ile parçalarına ayırabiliriz.

```haskell
headAndTail :: [a] -> (a, [a])
headAndTail (x:xs) = (x, xs)
headAndTail [] = error "Empty list has no head"
```

- `headAndTail` işlevi, bir listenin baş elemanını ve geri kalanını döner.
- Eğer liste boşsa bir hata üretir.

### Liste İşlemleri

#### Listede Eleman Arama

```haskell
contains :: Eq a => a -> [a] -> Bool
contains _ [] = False
contains y (x:xs) = (x == y) || contains y xs
```

- `contains` işlevi, bir listenin bir elemanı içerip içermediğini kontrol eder.

#### Liste Birleştirme

```haskell
append :: [a] -> [a] -> [a]
append [] ys = ys
append (x:xs) ys = x : append xs ys
```

- `append` işlevi, iki listeyi birleştirir.

### Liste Yapıcıları ile Liste Kullanımı

```haskell
main :: IO ()
main = do
    let list1 = 1 : 2 : 3 : []
    let list2 = 4 : 5 : 6 : []
    print list1  -- [1, 2, 3]
    print list2  -- [4, 5, 6]
    print (append list1 list2)  -- [1, 2, 3, 4, 5, 6]
    print (contains 2 list1)  -- True
    print (contains 7 list1)  -- False
    let (h, t) = headAndTail list1
    print h  -- 1
    print t  -- [2, 3]
```

Bu örnekler, Haskell'de liste yapıcıları (`[]` ve `(:)`) ile liste oluşturmayı, parçalarına ayırmayı ve temel liste işlemlerini göstermektedir.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Haskell'de "generator" terimi genellikle listelerin üretimi için kullanılır. Listelerin üretimi için Haskell'de yaygın olarak kullanılan bir teknik list comprehensions (liste anlamları) ve fonksiyonel yaklaşımlardır. İşte birkaç örnek:

### List Comprehensions

List comprehension, belirli bir kurala göre liste oluşturmak için kullanılan bir Haskell özelliğidir.

```haskell
-- İlk 10 doğal sayıların kareleri
squares :: [Int]
squares = [x * x | x <- [1..10]]

-- 1'den 10'a kadar olan çift sayılar
evens :: [Int]
evens = [x | x <- [1..10], even x]
```

### Sonsuz Listeler

Haskell'de, laziness (tembel değerlendirme) sayesinde sonsuz listeler oluşturabilirsiniz. Bu listeler, ihtiyaç duyulana kadar değerlendirilmez.

```haskell
-- Sonsuz doğal sayılar listesi
naturals :: [Int]
naturals = [1..]

-- Sonsuz Fibonacci dizisi
fibonacci :: [Int]
fibonacci = 0 : 1 : zipWith (+) fibonacci (tail fibonacci)
```

### `iterate` ve `unfoldr`

Haskell, belirli bir kurala göre liste oluşturmak için `iterate` ve `unfoldr` fonksiyonlarını sağlar.

```haskell
-- Bir fonksiyonu tekrar tekrar uygulayarak liste oluşturur
powersOfTwo :: [Int]
powersOfTwo = iterate (*2) 1

-- Bir tohum değerinden başlayarak liste oluşturur
import Data.List (unfoldr)

collatz :: Int -> [Int]
collatz n = unfoldr (\x -> if x == 1 then Nothing else Just (x, if even x then x `div` 2 else 3 * x + 1)) n
```

### `generator` Fonksiyon Örneği

Bir `generator` fonksiyonu oluşturmak, belirli bir kurala göre liste oluşturmanızı sağlar. Örneğin, belirli bir kurala göre artan sayılar üreten bir jeneratör yazalım:

```haskell
-- 1'den başlayarak n'ye kadar olan sayıların listesi
generateList :: Int -> [Int]
generateList n = [1..n]

-- Örnek kullanım
main :: IO ()
main = do
    let list = generateList 10
    print list  -- Çıktı: [1,2,3,4,5,6,7,8,9,10]
```

Bu örnekler, Haskell'de listeleri nasıl üretebileceğinizi gösterir. List comprehension, sonsuz listeler, `iterate` ve `unfoldr` gibi teknikler, Haskell'de listelerin güçlü bir şekilde manipüle edilmesini sağlar.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if <koşul> then <doğruysa döndürülecek değer> else <yanlışsa döndürülecek değer>
Özetle, , (virgül) if-then-else yapısında kullanılmaz ve bu bağlamda doğru kullanımda hata yapmamak için dikkatli olunmalıdır.
factorial :: Int -> Int
factorial n = if n == 0 || n == 1 then 1 else n * factorial (n - 1)


Haskell'de `guard` ifadeleri, fonksiyonlarda belirli koşulların sağlanması durumunda belirli sonuçlar döndüren bir yapı sağlar. `guard` kullanımı genellikle `where` veya `let` ile birlikte, özyinelemeli veya desen eşlemeli fonksiyonlarda kullanılır.

İşte `factorial` fonksiyonunu `guard` ifadeleri kullanarak nasıl yazabileceğinizi gösteren bir örnek:

```haskell
factorial :: Int -> Int
factorial n
  | n == 0    = 1
  | n == 1    = 1
  | otherwise = n * factorial (n - 1)
```

Bu kodda:
- `factorial n` ifadesi ile fonksiyon başlar.
- `|` sembolü ile başlayan satırlar `guard` ifadeleridir.
- `n == 0 = 1` ifadesi, `n` sıfıra eşitse 1 döndürür.
- `n == 1 = 1` ifadesi, `n` bire eşitse 1 döndürür.
- `otherwise` anahtar kelimesi, yukarıdaki hiçbir koşul sağlanmazsa kullanılan bir varsayılan koşuldur. Bu durumda, `n * factorial (n - 1)` ifadesini döndürür.

`guard` ifadeleri sayesinde, `if-then-else` ifadelerine göre daha okunabilir ve temiz kod yazılabilir. İşte bir başka örnek:

### Pythagorean Triples

Bir `pyths` fonksiyonu yazalım, verilen bir üst sınır `n` için Pythagorean üçlülerini bulur:

```haskell
pyths :: Int -> [(Int, Int, Int)]
pyths n = [(a, b, c) | a <- [1..n], b <- [1..n], c <- [1..n], a^2 + b^2 == c^2]
```

Bu fonksiyon, verilen `n` değerine kadar olan tüm sayıları `a`, `b` ve `c` olarak seçer ve Pythagorean üçlüleri oluşturanları filtreler. Şimdi bu fonksiyonu `guard` kullanarak daha okunabilir hale getirelim:

```haskell
pyths :: Int -> [(Int, Int, Int)]
pyths n = [(a, b, c) | c <- [1..n], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]
```

Burada, `guard`'ları içeren liste anlayışı kullanılmıştır ve her `a`, `b` ve `c` değeri belirli koşulu sağlayan üçlüleri döndürür.

Özetle, `guard` ifadeleri Haskell'de kodunuzu daha okunabilir ve bakımı kolay hale getirmek için güçlü bir araçtır. Belirli koşulları kontrol etmek için `if-then-else` yerine kullanılabilirler.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Bu kod parçası, Haskell'de `twice` adında bir fonksiyon tanımlar. `twice` fonksiyonu, verilen bir fonksiyonu iki kez uygular. Fonksiyonun tanımı ve tür imzası aşağıda açıklanmıştır:

### Fonksiyon Tanımı:
```haskell
twice :: (a -> a) -> a -> a
twice f x = f (f x)
```

### Tür İmzası:
```haskell
twice :: (a -> a) -> a -> a
```
- `(a -> a)`: Bir fonksiyon alır, bu fonksiyon `a` türünden bir değer alır ve yine `a` türünden bir değer döner.
- `a -> a`: `a` türünden bir değer alır ve `a` türünden bir değer döner.

### Fonksiyonun Tanımı ve Açıklaması:
```haskell
twice f x = f (f x)
```
- `f`: `a` türünden bir değeri alıp yine `a` türünden bir değer döndüren bir fonksiyon.
- `x`: `a` türünden bir değer.

`twice` fonksiyonu, `f` fonksiyonunu önce `x` üzerine uygular, ardından elde edilen sonuca tekrar `f` fonksiyonunu uygular. Yani `f` fonksiyonunu iki kez `x` üzerine uygular.

### Örnek Kullanım:
Bir örnekle `twice` fonksiyonunu açıklayalım:

```haskell
double :: Int -> Int
double x = x * 2

main = print (twice double 3)
```
Bu örnekte:
- `double` fonksiyonu, verilen bir sayıyı iki katına çıkarır.
- `twice double 3`, önce `double 3` hesaplar (sonuç `6`), ardından `double 6` hesaplar (sonuç `12`).

### Sonuç:
Bu kod parçası çalıştırıldığında `12` sonucu elde edilir, çünkü `double` fonksiyonu önce `3`'ü iki katına çıkararak `6` elde eder, ardından `6`'yı iki katına çıkararak `12` elde eder.

### Tam Kod:
```haskell
twice :: (a -> a) -> a -> a
twice f x = f (f x)

double :: Int -> Int
double x = x * 2

main = print (twice double 3)
```
Bu kodu çalıştırdığınızda `main` fonksiyonu içinde `twice` fonksiyonu `double` fonksiyonu ve `3` değeri ile kullanılarak sonucu ekrana yazdırır.

********************************************************************************************************************************************************************************************************

--map
myMap:: (a->a)->[a]->[a]
myMap _ [] = []
myMap f (x:xs) = f x : myMap f xs

myMap_c:: (a->a)->[a]->[a]
myMap_c _ [] = []
myMap_c f xs = [f x | x<-xs]
-- filter
myFilter:: (a->Bool)->[a]->[a]
myFilter _ [] = []
myFilter p (x:xs)
    | p x = x : myFilter p xs
    | otherwise =  myFilter p xs

myFilter_c:: (a->Bool)->[a]->[a]
myFilter_c _ [] = []
myFilter_c p xs = [x | x<-xs, p x]

-- foldr f [] = v: Eğer liste boşsa, başlangıç değeri v döner.
--f (x:xs) = x ⊕ f xs: Eğer liste boş değilse, listenin başındaki eleman x ile listenin geri kalanı xs üzerinde f fonksiyonu uygulanır ve ⊕ ile birleştirilir.
my_foldr :: (a -> b -> b) -> b -> [a] -> b
my_foldr _ v []     = v
my_foldr f v (x:xs) = f x (my_foldr f v xs)


-- Toplama örneği
sum_ :: [Int] -> Int
sum_ = my_foldr (+) 0

-- Çarpma örneği
product_ :: [Int] -> Int
product_ = my_foldr (*) 1

-- Birleştirme örneği
concat_ :: [[a]] -> [a]
concat_ = my_foldr (++) []

reverse_foldr :: [a] -> [a]
reverse_foldr = foldr (\x xs -> xs ++ [x]) []

(++) :: [a] -> [a] -> [a]
(++) xs ys = foldr (:) ys xs
main :: IO ()
main = do
    let result = myMap (+1) [1, 2, 3, 4]
    print result
    let result2 = myMap_c (+1) [1, 2, 3, 4]
    print result
    let filter = myFilter odd [1, 2..10]
    print filter
    let filter_c = myFilter odd [1, 2..10]
    print filter_c
    print $ sum_ [1, 2, 3, 4]        -- Çıktı: 10
    print $ product_ [1, 2, 3, 4]    -- Çıktı: 24
    print $ concat_ [[1, 2], [3, 4]] -- Çıktı: [1, 2, 3, 4]
    let reverse_foldr_r = reverse_foldr [1, 2, 3, 4]
    print $ "reverse width foldr: "++ show reverse_foldr_r
        let xs = [1, 2, 3]
        ys = [4, 5, 6]
        result = xs ++ ys
    putStrLn $ "Result: " ++ show result

------------final_denmeler.has
-- my_foldr :: (a -> b -> b) -> b -> [a] -> b
-- my_foldr _ v []     = v
-- my_foldr f v (x:xs) = f x (my_foldr f v xs)

-- sum_ :: [Int] -> Int
-- sum_ = my_foldr (+) 0

-- product_ :: [Int] -> Int
-- product_ = my_foldr (*) 1

-- concat_ :: [[a]] -> [a]
-- concat_ = my_foldr (++) []
 -- print $ "sum'is shedegi: " ++ show(sum [1, 2 ..5])
    -- print $ "product'is shedegi: " ++ show(product [1, 2 ..5])
    -- print $ concat_ [[1, 2], [3, 4]]
-- myMap :: (a -> a) -> [a] -> [a]
-- myMap _ [] = []
-- myMap f (x:xs) = f x : myMap f xs

-- myMap_c :: (a -> a) -> [a] -> [a]
-- myMap_c _ [] = []
-- myMap_c f xs = [f x | x <- xs]

-- myFilter :: (a -> Bool) -> [a] -> [a]
-- myFilter _ [] = []
-- myFilter p (x:xs)
--     | p x       = x : myFilter p xs
--     | otherwise = myFilter p xs

-- myFilter_c :: (a -> Bool) -> [a] -> [a]
-- myFilter_c _ [] = []
-- myFilter_c p xs = [x | x <- xs, p x]

-- main :: IO ()
-- main = do
--     let result = myMap (+1) [1, 2, 3, 4]
--     print result
--     let result2 = myMap_c (+1) [1, 2, 3, 4]
--     print result2
--     let filterResult = myFilter odd [1, 2 .. 10]
--     print filterResult
--     let filterResult_c = myFilter_c odd [1, 2 .. 10]
--     print filterResult_c


-- 1. Bir listenin elemanlarının toplamını ve uzunluğunu döndüren işlev
sumAndLength :: (Num a) => [a] -> (a, Int)
sumAndLength [] = (0, 0)
sumAndLength (x:xs) = 
    let (sumTail, lengthTail) = sumAndLength xs
    in (x + sumTail, 1 + lengthTail)

-- 2. Bir listenin maksimum ve minimum elemanlarını döndüren işlev
maxAndMin :: (Ord a) => [a] -> (a, a)
maxAndMin [] = error "Empty list"
maxAndMin [x] = (x, x)
maxAndMin (x:xs) = 
    let (maxTail, minTail) = maxAndMin xs
    in (max x maxTail, min x minTail)

-- 3. Bir listedeki tek ve çift sayıların sayısını döndüren işlev
countOddEven :: [Int] -> (Int, Int)
countOddEven [] = (0, 0)
countOddEven (x:xs) = 
    let (oddCount, evenCount) = countOddEven xs
    in if odd x 
       then (1 + oddCount, evenCount) 
       else (oddCount, 1 + evenCount)

-- 4. Bir listeyi tersine çeviren işlev
reverseList :: [a] -> [a]
reverseList [] = []
reverseList (x:xs) = reverseList xs ++ [x]

-- Main function for testing
main :: IO ()
main = do
    let list1 = [1, 2, 3, 4, 5]
    let list2 = [10, 5, 8, 3, 7]

    -- Test sumAndLength
    print $ sumAndLength list1 -- Output: (15, 5)
    
    -- Test maxAndMin
    print $ maxAndMin list2 -- Output: (10, 3)
    
    -- Test countOddEven
    print $ countOddEven list1 -- Output: (3, 2)
    
    -- Test reverseList
    print $ reverseList list1 -- Output: [5, 4, 3, 2, 1]
    
    ---------------------------final.has
    -- type Assoc k v  = [(k, v)]

-- phonebook:: Assoc String String
-- phonebook = [("Alice", "123-4567"), ("Bob", "987-6543"), ("Charlie", "555-1234")]

-- findValue :: Eq k => k -> Assoc k v -> Maybe v
-- findValue key [] = Nothing
-- findValue key ((k,v):xs)
--     | key == k  = Just v
--     | otherwise = findValue key xs

-- findValue_c :: Eq k => k -> Assoc k v -> v
-- findValue_c k t = head [v | (k', v) <- t, k == k']

-- --data
-- type Pos = (Int, Int)

-- data Move = Left_ | Right_ | Up_ | Down_ deriving (Show)

-- move_ :: Move -> Pos -> Pos
-- move_ Left_  (x, y) = (x - 1, y)
-- move_ Right_ (x, y) = (x + 1, y)
-- move_ Up_   (x, y) = (x, y - 1)
-- move_ Down_  (x, y) = (x, y + 1)

-- moves :: [Move] -> Pos -> Pos
-- moves [] p     = p
-- moves (m:ms) p = moves ms (move_ m p)

-- flip_ :: Move -> Move
-- flip_ Left_  = Right_
-- flip_ Right_ = Left_
-- flip_ Up_    = Down_
-- flip_ Down_  = Up_

-- --shape
-- data Shape = Circle Float
--            | Rectangle Float Float
--            | Treetangle Float Float
--            | Square Float
--            deriving Show

-- square :: Float -> Shape
-- square x = Rectangle x x

-- area :: Shape -> Float
-- area (Rectangle x y) = x * y
-- area (Circle r) = pi * r * r
-- area (Treetangle x y) = 0.5 * x * y
-- area (Square x) = x * x

-- --maybe
-- safediv		::	Int → Int → Maybe Int
-- safediv _ 0	=	Nothing
-- safediv m n	=	Just (m `div` n)

-- safehead		::	[a] → Maybe a
-- safehead []	=	Nothing
-- safehead xs	=	Just (head xs)

--map
-- myMap:: (a->a)->[a]->[a]
-- myMap _ [] = []
-- myMap f (x:xs) = f x : myMap f xs

-- myMap_c:: (a->a)->[a]->[a]
-- myMap_c _ [] = []
-- myMap_c f xs = [f x | x<-xs]
main::IO()
main =do
    -- let aliceNumber= findValue "Alice" phonebook
    -- print aliceNumber

    -- let aliceNumber2= findValue_c "Alice" phonebook
    -- print aliceNumber2

    -- let initialPos = (5, 3)
    -- let movesList = [Right_, Down_]
    -- let finalPos = moves movesList initialPos
    -- putStrLn $ "Final Position after moves: " ++ show finalPos

    -- let shape1 = Circle 5.0
    -- let shape2 = square 4.0
    -- let shape3 = Rectangle 3.0 4.0
    -- let shape4 = Treetangle 3.0 4.0
    -- let shape5 = Square 4.0

    -- print $ "Area of shape1 (Circle): " ++ show (area shape1)
    -- print $ "Area of shape2 (Square via Rectangle): " ++ show (area shape2)
    -- print $ "Area of shape3 (Rectangle): " ++ show (area shape3)
    -- print $ "Area of shape4 (Treetangle): " ++ show (area shape4)
    -- print $ "Area of shape5 (Square): " ++ show (area shape5)
    let result = myMap (+10) [1, 2 ..20]
    print result
    let result2 = myMap_c (+10) [1, 2 ..20]
    print result


































































































































